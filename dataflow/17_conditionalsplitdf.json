{
	"name": "17_conditionalsplitdf",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "salesproduct_source",
						"type": "DatasetReference"
					},
					"name": "productsource"
				},
				{
					"dataset": {
						"referenceName": "salesorderdetails_source",
						"type": "DatasetReference"
					},
					"name": "salesorderdetailssource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable11",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable12",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductCategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ThumbNailPhoto as binary,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> productsource",
				"source(output(",
				"          SalesOrderID as integer,",
				"          SalesOrderDetailID as integer,",
				"          OrderQty as integer,",
				"          ProductID as integer,",
				"          UnitPrice as decimal(19,4),",
				"          UnitPriceDiscount as decimal(19,4),",
				"          LineTotal as decimal(38,6),",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> salesorderdetailssource",
				"productsource, salesorderdetailssource join(productsource@ProductID == salesorderdetailssource@ProductID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          Name,",
				"          ProductNumber,",
				"          UnitPrice,",
				"          LineTotal",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(Description = case(UnitPrice<100, 'UnitPrice is less than 100','UnitPrice is equal or greater than 100')) ~> derivedColumn1",
				"derivedColumn1 split(UnitPrice<100,",
				"     disjoint: false) ~> split1@(lessthan100, greaterthanorequalto100)",
				"split1@lessthan100 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"split1@greaterthanorequalto100 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          ProductNumber as string,",
				"          UnitPrice as decimal(19,4),",
				"          LineTotal as decimal(38,6),",
				"          Description as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}